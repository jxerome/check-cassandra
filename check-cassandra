#!/bin/bash
#
# Check cassandra local installation.
#
# This file is to be executed on all Cassandra nodes while Cassandra is running.
# It produce a file cassandra-on-<node>-<time>.tar.gz file in current file
#

# These variables can be changed to adapt the script behavior.
#CASSANDRA_HOME=
nodetool=${CASSANDRA_HOME}/bin/nodetool # Add required global option like jmx authentication
cqlsh=${CASSANDRA_HOME}/bin/cqlsh       # Add required global option like CQL authentication
cassandra_logs_dir="${CASSANDRA_HOME}/logs"
result_dir="cassandra-on-$(uname -n)-$(date "+%Y%m%d%H%M")"
result_file="${result_dir}.tar.gz"

function prepare_directories() {
    if [[ -e $result_file ]]; then
        rm -f "$result_file"
    fi
    if [[ -e $result_dir ]]; then
        rm -fr "$result_dir"
    fi
    mkdir -p "$result_dir"
}

function find_cassandra() {
    if [[ -z $CASSANDRA_HOME ]]; then
        echo "Cassandra HOME not found be set CASSANDRA_HOME variable at the begin of the script or in the environnement" >&2
        exit 1
    fi
}

function copy_config() {
    local conf_dir="${result_dir}/conf"
    mkdir -p "$conf_dir"

    cp $CASSANDRA_HOME/conf/cassandra.yaml "${conf_dir}"
    cp $CASSANDRA_HOME/conf/cassandra-env.sh "${conf_dir}"
    cp $CASSANDRA_HOME/conf/cassandra-rackdc.properties "${conf_dir}"
    cp $CASSANDRA_HOME/conf/logback.xml "${conf_dir}"
}

function call_nodetool_cmd() {
    local cmd=$1
    $nodetool $cmd > "$nodetool_dir/$cmd"
}

function check_nodetool() {
    local nodetool_dir="${result_dir}/nodetool"
    mkdir -p "$nodetool_dir"

    call_nodetool_cmd info
    call_nodetool_cmd status
    call_nodetool_cmd version
    call_nodetool_cmd describecluster
    call_nodetool_cmd cfstats
    call_nodetool_cmd tpstats
    call_nodetool_cmd statusbinary
    call_nodetool_cmd statusthrift
    call_nodetool_cmd compactionhistory
    call_nodetool_cmd compactionstats
    call_nodetool_cmd getcompactionthroughput
    call_nodetool_cmd getstreamthroughput
    call_nodetool_cmd gossipinfo
    call_nodetool_cmd netstats
    call_nodetool_cmd proxyhistograms
}

function check_cqlsh() {
    local cqlsh_dir="${result_dir}/cqlsh"
    mkdir -p "$cqlsh_dir"

    $cqlsh -e "describe full osa" > "$cqlsh_dir/schema"
}

function check_os() {
    local os_dir="${result_dir}/os"
    mkdir -p "$os_dir"

    whoami > "${os_dir}/whoami" 2>&1
    uname -a > "${os_dir}/uname" 2>&1
    ulimit -a > "${os_dir}/limits" 2>&1
    sysctl -a > "${os_dir}/sysctl" 2>&1
}

function copy_logs() {
    local logs_dir="${result_dir}/logs"
    mkdir -p "$logs_dir"

    cp "${cassandra_logs_dir}"/* "${logs_dir}"
}


function package() {
    tar czf "${result_file}" "${result_dir}"
}

run() {
    prepare_directories
    find_cassandra
    copy_config
    check_nodetool
    check_cqlsh
    check_os
    copy_logs
    package
    echo "Cassandra checked result to be found in ${result_file}"
}

run
